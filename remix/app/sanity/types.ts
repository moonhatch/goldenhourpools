// Query TypeMap
import "@sanity/client";

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Video = {
  _type: "video";
  videoLabel?: string;
  url?: string;
};

export type Redirect = {
  _id: string;
  _type: "redirect";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  source?: string;
  destination?: string;
  permanent?: boolean;
  isEnabled?: boolean;
};

export type TextWithIllustration = {
  _type: "textWithIllustration";
  heading?: string;
  tagline?: string;
  excerpt?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  announcement?: string;
  navLinksPrimary?: Array<
    {
      _key: string;
    } & Link
  >;
  navLinksSecondary?: Array<
    {
      _key: string;
    } & Link
  >;
  footerLinksPrimary?: Array<
    {
      _key: string;
    } & Link
  >;
  footerLinksSecondary?: Array<
    {
      _key: string;
    } & Link
  >;
  footerLinksTertiary?: Array<
    {
      _key: string;
    } & Link
  >;
};

export type Promotion = {
  _id: string;
  _type: "promotion";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  link?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  seo?: Seo;
  pageBuilder?: Array<
    | ({
        _key: string;
      } & BlockContact)
    | ({
        _key: string;
      } & BlockContent)
    | ({
        _key: string;
      } & BlockFAQ)
    | ({
        _key: string;
      } & BlockHeroImage)
    | ({
        _key: string;
      } & BlockHeroVideo)
    | ({
        _key: string;
      } & BlockMedia)
    | ({
        _key: string;
      } & BlockThankYou)
  >;
};

export type Seo = {
  _type: "seo";
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  noIndex?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Link = {
  _type: "link";
  text?: string;
  to?: string;
};

export type Gallery = {
  _type: "gallery";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Form = {
  _type: "form";
  label?: string;
  heading?: string;
  form?: "newsletter" | "register" | "contact";
};

export type Faq = {
  _type: "faq";
  question?: string;
  answer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type BlockThankYou = {
  _type: "blockThankYou";
  container?: Container;
  heading?: string;
};

export type BlockMedia = {
  _type: "blockMedia";
  container?: Container;
  media?: Media;
};

export type Media = {
  _type: "media";
  showVideo?: boolean;
  isRounded?: boolean;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  url?: string;
  urlTitle?: string;
  aspect?:
    | 1.7777777777777777
    | 1.5
    | 1.4
    | 1.25
    | 1
    | 0.8
    | 0.7142857142857143
    | 0.6666666666666666
    | 0.5625;
  aspectDesktop?:
    | 1.7777777777777777
    | 1.5
    | 1.4
    | 1.25
    | 1
    | 0.8
    | 0.7142857142857143
    | 0.6666666666666666
    | 0.5625;
  tag?: string;
};

export type BlockHeroVideo = {
  _type: "blockHeroVideo";
  title?: string;
  heading?: string;
  button?: Button;
  url?: string;
  urlTitle?: string;
  urlThumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type BlockHeroImage = {
  _type: "blockHeroImage";
  title?: string;
  heading?: string;
  button?: Button;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Button = {
  _type: "button";
  text?: string;
  to?: string;
};

export type BlockFAQ = {
  _type: "blockFAQ";
  container?: Container;
  faqs?: Array<
    {
      _key: string;
    } & Faq
  >;
};

export type BlockContent = {
  _type: "blockContent";
  container?: Container;
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | ({
        _key: string;
      } & Button)
  >;
};

export type BlockContact = {
  _type: "blockContact";
  container?: Container;
  heading?: string;
};

export type Container = {
  _type: "container";
  width?: "sm" | "md" | "lg" | "max";
  topSpacing?: "sm" | "md" | "lg" | "xl";
  topSpacingDesktop?: "sm" | "md" | "lg" | "xl";
  bottomSpacing?: "sm" | "md" | "lg" | "xl";
  bottomSpacingDesktop?: "sm" | "md" | "lg" | "xl";
  isCentered?: boolean;
  isMobileFullWidth?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Video
  | Redirect
  | TextWithIllustration
  | SiteSettings
  | Promotion
  | Page
  | Seo
  | Slug
  | Link
  | Gallery
  | Form
  | Faq
  | BlockThankYou
  | BlockMedia
  | Media
  | BlockHeroVideo
  | BlockHeroImage
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Button
  | BlockFAQ
  | BlockContent
  | BlockContact
  | Container;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../remix/app/sanity/queries.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{  "seo": {    "title": coalesce(seo.title, title, ""),    "description": coalesce(seo.description,  ""),    "image": seo.image,    "noIndex": seo.noIndex == true  },  title,  pageBuilder[]{    _type == "blockContact" => {      _type,      _key,      container,      heading    },    _type == "blockContent" => {      _type,      _key,      container,      content    },    _type == "blockFAQ" => {      _type,      _key,      container,      faqs    },    _type == "blockHeroImage" => {      _type,      _key,      title,      heading,      button,      image    },    _type == "blockHeroVideo" => {      _type,      _key,      title,      heading,      button,      url,      urlTitle,      urlThumbnail    },    _type == "blockMedia" => {      _type,      _key,      container,      media    },    _type == "blockThankYou" => {      _type,      _key,      container,      heading    },    // "callToAction" is a "reference"    // We can resolve "itself" with the @ operator    _type == "callToAction" => @-> {      _type,      title,      link    }    // ...continue for each unique "_type"  },}
export type PAGE_QUERYResult = {
  seo: {
    title: string | "";
    description: string | "";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    noIndex: boolean | false;
  };
  title: string | null;
  pageBuilder: Array<
    | {
        _type: "blockContact";
        _key: string;
        container: Container | null;
        heading: string | null;
      }
    | {
        _type: "blockContent";
        _key: string;
        container: Container | null;
        content: Array<
          | ({
              _key: string;
            } & Button)
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h1" | "h2" | "normal";
              listItem?: "bullet";
              markDefs?: Array<{
                href?: string;
                _type: "link";
                _key: string;
              }>;
              level?: number;
              _type: "block";
              _key: string;
            }
        > | null;
      }
    | {
        _type: "blockFAQ";
        _key: string;
        container: Container | null;
        faqs: Array<
          {
            _key: string;
          } & Faq
        > | null;
      }
    | {
        _type: "blockHeroImage";
        _key: string;
        title: string | null;
        heading: string | null;
        button: Button | null;
        image: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
      }
    | {
        _type: "blockHeroVideo";
        _key: string;
        title: string | null;
        heading: string | null;
        button: Button | null;
        url: string | null;
        urlTitle: string | null;
        urlThumbnail: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
      }
    | {
        _type: "blockMedia";
        _key: string;
        container: Container | null;
        media: Media | null;
      }
    | {
        _type: "blockThankYou";
        _key: string;
        container: Container | null;
        heading: string | null;
      }
  > | null;
} | null;
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)] | order(publishedAt desc)
export type POSTS_QUERYResult = Array<never>;
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]
export type POST_QUERYResult = null;
// Variable: REDIRECTS_QUERY
// Query: *[_type == "redirect" && isEnabled == true && source == $pathname][0] {  source,  destination,  permanent}
export type REDIRECTS_QUERYResult = {
  source: string | null;
  destination: string | null;
  permanent: boolean | null;
} | null;
// Variable: SITEMAP_QUERY
// Query: *[_type in ["page"] && defined(slug.current)] {  "href": select(    _type == "page" => "/" + slug.current,    slug.current  ),  "noIndex": seo.noIndex == true,  _updatedAt}
export type SITEMAP_QUERYResult = Array<{
  href: string | null;
  noIndex: boolean | false;
  _updatedAt: string;
}>;
// Variable: SITE_SETTINGS_QUERY
// Query: *[_type == "siteSettings"][0]{  title,  announcement,  navLinksPrimary,  navLinksSecondary,  footerLinksPrimary,  footerLinksSecondary,  footerLinksTertiary}
export type SITE_SETTINGS_QUERYResult = {
  title: string | null;
  announcement: string | null;
  navLinksPrimary: Array<
    {
      _key: string;
    } & Link
  > | null;
  navLinksSecondary: Array<
    {
      _key: string;
    } & Link
  > | null;
  footerLinksPrimary: Array<
    {
      _key: string;
    } & Link
  > | null;
  footerLinksSecondary: Array<
    {
      _key: string;
    } & Link
  > | null;
  footerLinksTertiary: Array<
    {
      _key: string;
    } & Link
  > | null;
} | null;

declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "page" && slug.current == $slug][0]{\n  "seo": {\n    "title": coalesce(seo.title, title, ""),\n    "description": coalesce(seo.description,  ""),\n    "image": seo.image,\n    "noIndex": seo.noIndex == true\n  },\n  title,\n  pageBuilder[]{\n    _type == "blockContact" => {\n      _type,\n      _key,\n      container,\n      heading\n    },\n    _type == "blockContent" => {\n      _type,\n      _key,\n      container,\n      content\n    },\n    _type == "blockFAQ" => {\n      _type,\n      _key,\n      container,\n      faqs\n    },\n    _type == "blockHeroImage" => {\n      _type,\n      _key,\n      title,\n      heading,\n      button,\n      image\n    },\n    _type == "blockHeroVideo" => {\n      _type,\n      _key,\n      title,\n      heading,\n      button,\n      url,\n      urlTitle,\n      urlThumbnail\n    },\n    _type == "blockMedia" => {\n      _type,\n      _key,\n      container,\n      media\n    },\n    _type == "blockThankYou" => {\n      _type,\n      _key,\n      container,\n      heading\n    },\n    // "callToAction" is a "reference"\n    // We can resolve "itself" with the @ operator\n    _type == "callToAction" => @-> {\n      _type,\n      title,\n      link\n    }\n    // ...continue for each unique "_type"\n  },\n}': PAGE_QUERYResult;
    '*[_type == "post" && defined(slug.current)] | order(publishedAt desc)': POSTS_QUERYResult;
    '*[_type == "post" && slug.current == $slug][0]': POST_QUERYResult;
    '\n*[_type == "redirect" && isEnabled == true && source == $pathname][0] {\n  source,\n  destination,\n  permanent\n}': REDIRECTS_QUERYResult;
    '\n*[_type in ["page"] && defined(slug.current)] {\n  "href": select(\n    _type == "page" => "/" + slug.current,\n    slug.current\n  ),\n  "noIndex": seo.noIndex == true,\n  _updatedAt\n}': SITEMAP_QUERYResult;
    '\n*[_type == "siteSettings"][0]{\n  title,\n  announcement,\n  navLinksPrimary,\n  navLinksSecondary,\n  footerLinksPrimary,\n  footerLinksSecondary,\n  footerLinksTertiary\n}': SITE_SETTINGS_QUERYResult;
  }
}
